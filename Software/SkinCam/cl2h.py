#!/usr/bin/env python3

####################################################################################################
#                                                                                                  #
#   This file is part of the ISF SkinCam project.                                                  #
#                                                                                                  #
#   Author:                                                                                        #
#   Marcel Hasler <mahasler@gmail.com>                                                             #
#                                                                                                  #
#   Copyright (c) 2020 - 2024                                                                      #
#   Bonn-Rhein-Sieg University of Applied Sciences                                                 #
#                                                                                                  #
#   This program is free software: you can redistribute it and/or modify it under the terms        #
#   of the GNU General Public License as published by the Free Software Foundation, either         #
#   version 3 of the License, or (at your option) any later version.                               #
#                                                                                                  #
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;      #
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.      #
#   See the GNU General Public License for more details.                                           #
#                                                                                                  #
#   You should have received a copy of the GNU General Public License along with this program.     #
#   If not, see <https:# www.gnu.org/licenses/>.                                                   #
#                                                                                                  #
####################################################################################################

import os
import re
import sys

if len(sys.argv) != 4:
    print("Usage: %s indir outfile mapname" % sys.argv[0])
    sys.exit(2)

optimize = True

singleline_pattern = re.compile('\\/\\/(.)*(\\n|$)')
multiline_pattern = re.compile('\\/\\*(\\*(?!\\/)|[^*])*\\*\\/')

def read_file(filename):
    infile = open(filename, 'r')
    data = infile.read()
    infile.close()

    if optimize:
        data = singleline_pattern.sub('\\n', data) # Remove comments
        data = multiline_pattern.sub('', data)

    lines = data.splitlines()

    if optimize:
        lines = [ x for x in lines if x ] # Remove empty lines

    for i,l in enumerate(lines):
        lines[i] = lines[i].replace('\\', '\\\\')
        lines[i] = lines[i].replace('\"', '\\\"')
        lines[i] = lines[i].strip('\n')

    return lines

directory = sys.argv[1]
destfile = sys.argv[2]
mapname = sys.argv[3]

programs = []

newest_mtime = 0

for filename in sorted(os.listdir(directory)):
    filepath = "%s/%s" % (directory, filename)

    if not os.path.isfile(filepath):
        continue

    newest_mtime = max(newest_mtime, os.path.getmtime(filepath))

    try:
        print("Reading program file %s..." % filename)
        programs.append((filename, read_file(filepath)))
    except:
        print("Couldn't open program file %s, skipping." % filename)

if len(programs) == 0:
    sys.exit("No programs found.")

if os.path.isfile(destfile) and os.path.getmtime(destfile) >= newest_mtime:
    print("OpenCL programs header is up to date.")
    sys.exit(0)

outfile = open(destfile, 'w')

outfile.write("// Automatically generated by cl2h.py. Do not edit, it will be overwritten!\n")
outfile.write("#pragma once\n")
outfile.write("\n")
outfile.write("#include <map>\n")
outfile.write("#include <string>\n")
outfile.write("\n")
outfile.write("const std::map<std::string, std::string> %s = {\n" % mapname)

for name,src in programs:
    outfile.write("    {\n")
    outfile.write("        \"%s\",\n" % name)
    for l in src:
        outfile.write("        \"%s\\n\"\n" % l)
    outfile.write("    },\n")

outfile.write("};\n")
outfile.close()

print("New OpenCL programs header generated.")
